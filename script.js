import { setupCharacterSelection } from "./scripts/character-selection.js";
import { quizData } from "./scripts/quiz.js";
import { showResult } from "./scripts/result.js";

let selectedCharacter = null;
let correctAnswersCount = 0;
let currentQuestionIndex = 0;
let totalQuestions = 0;
let quizQuestions = [];
let selectedGender = null;
let isMusicOn = true;
let isEffectsOn = true;

const backgroundMusic = document.getElementById("background-music");
const shortEffect = document.getElementById("short-effect");

// üëá –ù–æ–≤–∏–π –∫–æ–¥ –¥–ª—è –ª–æ—É–¥–µ—Ä–∞
const loaderContainer = document.getElementById("loader");

export const showLoader = () => {
  loaderContainer.classList.add("visible");
};

export const hideLoader = () => {
  loaderContainer.classList.remove("visible");
};
// üëÜ –ö—ñ–Ω–µ—Ü—å –Ω–æ–≤–æ–≥–æ –∫–æ–¥—É

const characterNamesMap = {
  –Ñ–≥–∏–ø—Ç—è–Ω–∏–Ω: "egypt",
  –ì—Ä–µ–∫: "greek",
  –†–∏–º–ª—è–Ω–∏–Ω: "roman",
  –Ñ–≤—Ä–µ–π: "hebrew",
};

const characterEffectsMap = {
  –Ñ–≥–∏–ø—Ç—è–Ω–∏–Ω: "egypt-short.mp3",
  –ì—Ä–µ–∫: "greeks-short.mp3",
  –†–∏–º–ª—è–Ω–∏–Ω: "romans-short.mp3",
  –Ñ–≤—Ä–µ–π: "hebrews-short.mp3",
};

const crossfadeMusic = newSrc => {
  backgroundMusic.src = newSrc;
  backgroundMusic.load();
  if (isMusicOn) {
    backgroundMusic.play().catch(e => console.error("Failed to play music:", e));
  }
};

document.addEventListener("DOMContentLoaded", () => {
  const heroSection = document.getElementById("hero");
  const characterSelectionSection = document.getElementById("character-selection");
  const nameInputSection = document.getElementById("name-input");
  const quizSection = document.getElementById("quiz");
  const resultSection = document.getElementById("result");
  const playerNameInput = document.getElementById("player-name");
  const main = document.querySelector("main");
  const quizContainer = document.getElementById("quiz-container");
  let missionIntro = document.getElementById("mission-intro");
  let questionsOverlay = document.getElementById("questions-overlay");

  const genderMaleButton = document.getElementById("gender-male");
  const genderFemaleButton = document.getElementById("gender-female");

  const chooseCharacterButton = document.getElementById("choose-character");
  const confirmCharacterButton = document.getElementById("confirm-character");
  const startGameButton = document.getElementById("start-game");
  const retryButton = document.getElementById("retry");
  const backButton = document.getElementById("back-to-characters");
  const backToHeroButton = document.getElementById("back-to-hero");

  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ—É—Ç–µ—Ä—ñ–≤
  const toggleMusicButton = document.getElementById("toggle-music");
  const toggleEffectsButton = document.getElementById("toggle-effects");
  const toggleMusicFooterButton = document.getElementById("toggle-music-footer");
  const toggleEffectsFooterButton = document.getElementById("toggle-effects-footer");

  const bottomButtonsContainer = document.getElementById("bottom-buttons-container");
  const mainFooter = document.getElementById("main-footer");

  // –Ü–∫–æ–Ω–∫–∏ –¥–ª—è –æ–±–æ—Ö –≥—Ä—É–ø –∫–Ω–æ–ø–æ–∫
  // ‚ö†Ô∏è –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –î–æ—Å—Ç—É–ø –¥–æ —ñ–∫–æ–Ω–æ–∫ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—É 'DOMContentLoaded', —è–∫ –±—É–ª–æ —Ä–∞–Ω—ñ—à–µ,
  // –∞–ª–µ –¥–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫, —è–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å.
  const musicIcon = toggleMusicButton ? toggleMusicButton.querySelector("i") : null;
  const effectsIcon = toggleEffectsButton ? toggleEffectsButton.querySelector("i") : null;
  const musicFooterIcon = toggleMusicFooterButton
    ? toggleMusicFooterButton.querySelector("i")
    : null;
  const effectsFooterIcon = toggleEffectsFooterButton
    ? toggleEffectsFooterButton.querySelector("i")
    : null;

  const updateMusicButtonState = () => {
    if (isMusicOn) {
      if (musicIcon) musicIcon.classList.replace("fa-volume-mute", "fa-volume-up");
      if (musicFooterIcon) musicFooterIcon.classList.replace("fa-volume-mute", "fa-volume-up");
    } else {
      if (musicIcon) musicIcon.classList.replace("fa-volume-up", "fa-volume-mute");
      if (musicFooterIcon) musicFooterIcon.classList.replace("fa-volume-up", "fa-volume-mute");
    }
  };

  const updateEffectsButtonState = () => {
    if (isEffectsOn) {
      if (effectsIcon) effectsIcon.classList.replace("fa-bell-slash", "fa-bell");
      if (effectsFooterIcon) effectsFooterIcon.classList.replace("fa-bell-slash", "fa-bell");
    } else {
      if (effectsIcon) effectsIcon.classList.replace("fa-bell", "fa-bell-slash");
      if (effectsFooterIcon) effectsFooterIcon.classList.replace("fa-bell", "fa-bell-slash");
    }
  };

  const playShortEffect = effectSrc => {
    if (isEffectsOn) {
      shortEffect.pause();
      shortEffect.currentTime = 0;
      shortEffect.src = `audio/${effectSrc}`;
      shortEffect.load();
      shortEffect.play().catch(e => {
        if (e.name !== "AbortError") {
          console.error("Failed to play short effect:", e);
        }
      });
    }
  };

  const missionIntros = {
    –Ñ–≥–∏–ø—Ç—è–Ω–∏–Ω: (playerName, gender) => {
      return `
        <h2>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${playerName}, —É –í—ñ—á–Ω—É –î–æ–ª–∏–Ω—É –ù—ñ–ª—É!</h2>
        <p>–§–∞—Ä–∞–æ–Ω –∑–∞–∫–ª–∏–∫–∞—î —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω–Ω—è –Ñ–≥–∏–ø—Ç–æ–º. –ß–∏ –≥–æ—Ç–æ–≤${
          gender === "male" ? "–∏–π" : "–∞"
        } —Ç–∏ —Ä–æ–∑–≥–∞–¥–∞—Ç–∏ —Ç–∞—î–º–Ω–∏—Ü—ñ –ø—ñ—Ä–∞–º—ñ–¥ —ñ –¥–æ–≤–µ—Å—Ç–∏ —Å–≤–æ—é –º—É–¥—Ä—ñ—Å—Ç—å?</p>
        <button id="start-mission">–ü–æ—á–∞—Ç–∏ –ú—ñ—Å—ñ—é</button>
      `;
    },
    –ì—Ä–µ–∫: (playerName, gender) => {
      const genderText = gender === "male" ? "–≥–µ—Ä–æ—é" : "–≥–µ—Ä–æ—ó–Ω–µ";
      return `
        <h2>–°–ª–∞–≤–∞ —Ç–æ–±—ñ, ${playerName}, –Ω–∞—â–∞–¥–∫—É ${genderText} –ï–ª–ª–∞–¥–∏!</h2>
        <p>–û–ª—ñ–º–ø —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î –∑–∞ —Ç–æ–±–æ—é! –î–æ–≤–µ–¥–∏ —Å–≤–æ—é –¥–æ–±–ª–µ—Å—Ç—å —Ç–∞ —ñ–Ω—Ç–µ–ª–µ–∫—Ç —É –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω–Ω—è—Ö, –≥—ñ–¥–Ω–∏—Ö –ê—Ñ—ñ–Ω—Å—å–∫–æ–≥–æ –ê–≥–æ—Ä–∏. –ß–∏ –≥–æ—Ç–æ–≤${
          gender === "male" ? "–∏–π" : "–∞"
        } —Ç–∏ –¥–æ –≤–µ–ª–∏–∫–∏—Ö –∑–≤–µ—Ä—à–µ–Ω—å?</p>
        <button id="start-mission">–ü–æ—á–∞—Ç–∏ –ú—ñ—Å—ñ—é</button>
      `;
    },
    –†–∏–º–ª—è–Ω–∏–Ω: (playerName, gender) => {
      const genderText = gender === "male" ? "–≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–µ" : "–≥—Ä–æ–º–∞–¥—è–Ω–∫–æ";
      return `
        <h2>Ave, ${playerName}, ${genderText} –†–∏–º—É!</h2>
        <p>–Ü–º–ø–µ—Ä—ñ—è –∫–ª–∏—á–µ! –ü—Ä–∏–≥–æ—Ç—É–π—Å—è –¥–æ –≤–∞–∂–∫–∏—Ö –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω—å, —â–æ –∑–∞–≥–∞—Ä—Ç—É—é—Ç—å —Ç–≤—ñ–π –¥—É—Ö —ñ —Ä–æ–∑—É–º. –ß–∏ –≥—ñ–¥–Ω${
          gender === "male" ? "–∏–π" : "–∞"
        } —Ç–∏ –Ω–æ—Å–∏—Ç–∏ –ª–∞–≤—Ä–∏ –¶–µ–∑–∞—Ä—è?</p>
        <button id="start-mission">–ü–æ—á–∞—Ç–∏ –ú—ñ—Å—ñ—é</button>
      `;
    },
    –Ñ–≤—Ä–µ–π: (playerName, gender) => {
      const genderText = gender === "male" ? "–¥–∏—Ç—è –¶–∞—Ä—è" : "–¥–æ—á–∫–æ –¶–∞—Ä—è";
      return `
        <h2>–®–∞–ª–æ–º, ${playerName}, –æ–±—Ä–∞–Ω${gender === "male" ? "–µ" : "–∞"} ${genderText}!</h2>
        <p>–®–ª—è—Ö –¥–æ –∑–Ω–∞–Ω–Ω—è –¥–æ–≤–≥–∏–π, –∞–ª–µ —ñ—Å—Ç–∏–Ω–∞ –≤–µ–¥–µ –ø—Ä–∞–≤–µ–¥–Ω–∏—Ö. –î–æ–≤–µ–¥–∏ —Å–≤–æ—é –≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ç–∞ –º—É–¥—Ä—ñ—Å—Ç—å, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è, —â–æ —Å—è–≥–∞—é—Ç—å –∫–æ—Ä—ñ–Ω–Ω—è–º –≤—ñ–∫—ñ–≤. –ß–∏ –≥–æ—Ç–æ–≤${
          gender === "male" ? "–∏–π" : "–∞"
        } —Ç–∏ –¥–æ –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω–Ω—è –≤—ñ—Ä–∏?</p>
        <button id="start-mission">–ü–æ—á–∞—Ç–∏ –ú—ñ—Å—ñ—é</button>
      `;
    },
  };

  const displayQuestion = index => {
    questionsOverlay.innerHTML = "";
    if (index < quizQuestions.length) {
      const questionData = quizQuestions[index];
      const questionBlock = document.createElement("div");
      questionBlock.classList.add("question-block", "fade-in");

      const questionText = document.createElement("h3");
      questionText.textContent = `${index + 1}. ${questionData.question}`;
      questionBlock.appendChild(questionText);

      questionData.options.forEach((option, optionIndex) => {
        const button = document.createElement("button");
        button.classList.add("quiz-option");
        button.textContent = option;
        button.dataset.correct = optionIndex === questionData.correct;
        button.addEventListener("click", handleAnswerClick);
        questionBlock.appendChild(button);
      });
      questionsOverlay.appendChild(questionBlock);
    } else {
      showSection(resultSection);
      showResult(
        selectedCharacter,
        playerNameInput.value,
        correctAnswersCount,
        totalQuestions,
        selectedGender
      );
    }
  };

  const handleAnswerClick = event => {
    const isCorrect = event.target.dataset.correct === "true";
    if (isCorrect) {
      correctAnswersCount++;
    }

    const feedback = document.createElement("p");
    feedback.textContent = isCorrect ? "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!" : "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.";
    feedback.classList.add(isCorrect ? "correct" : "incorrect");
    event.target.parentElement.appendChild(feedback);

    const buttons = event.target.parentElement.querySelectorAll("button");
    buttons.forEach(btn => (btn.disabled = true));

    const currentQuestionBlock = questionsOverlay.querySelector(".question-block");
    if (currentQuestionBlock) {
      currentQuestionBlock.classList.remove("fade-in");
      currentQuestionBlock.classList.add("fade-out");
      currentQuestionBlock.addEventListener(
        "animationend",
        () => {
          currentQuestionIndex++;
          displayQuestion(currentQuestionIndex);
        },
        { once: true }
      );
    }
  };

  const handleCharacterConfirmation = () => {
    const activeSlide = document.querySelector(".swiper-slide-active");
    if (!activeSlide) {
      Swal.fire({
        title: "–ü–æ–º–∏–ª–∫–∞!",
        text: "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!",
        icon: "error",
        confirmButtonText: "–ó—Ä–æ–∑—É–º—ñ–ª–æ",
      });
      return;
    }

    selectedCharacter = activeSlide.querySelector("p").textContent;

    if (characterEffectsMap[selectedCharacter]) {
      playShortEffect(characterEffectsMap[selectedCharacter]);
    }

    selectedGender = null;
    genderMaleButton.classList.remove("active");
    genderFemaleButton.classList.remove("active");

    showSection(nameInputSection);

    const themeClass = characterNamesMap[selectedCharacter];
    main.className = "";
    main.classList.add(`theme-${themeClass}`);
  };

  const handleStartGame = () => {
    const playerName = playerNameInput.value.trim();
    if (!playerName) {
      Swal.fire({
        title: "–ó–∞–±—É–ª–∏ —ñ–º'—è",
        text: "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è.",
        icon: "warning",
      });
      return;
    }
    if (selectedGender === null) {
      Swal.fire({
        title: "–ó–∞–±—É–ª–∏ —Å—Ç–∞—Ç—å",
        text: "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å.",
        icon: "warning",
      });
      return;
    }

    showSection(quizSection);

    const characterData = quizData[selectedCharacter];
    const quizImage = document.createElement("img");
    quizImage.src = characterData.image;
    quizImage.alt = `–Ü–º–ø–µ—Ä—ñ—è: ${selectedCharacter}`;
    quizImage.classList.add("quiz-image");

    const existingImage = quizContainer.querySelector(".quiz-image");
    if (existingImage) {
      existingImage.remove();
    }
    quizContainer.prepend(quizImage);

    quizQuestions = characterData.questions;
    totalQuestions = quizQuestions.length;
    currentQuestionIndex = 0;
    correctAnswersCount = 0;

    missionIntro.innerHTML = missionIntros[selectedCharacter](playerName, selectedGender);
    missionIntro.classList.remove("hidden");
    questionsOverlay.classList.add("hidden");

    const audioFiles = {
      –Ñ–≥–∏–ø—Ç—è–Ω–∏–Ω: "egypts.mp3",
      –ì—Ä–µ–∫: "greeks.mp3",
      –†–∏–º–ª—è–Ω–∏–Ω: "romans.mp3",
      –Ñ–≤—Ä–µ–π: "hebrews.mp3",
    };

    crossfadeMusic(`audio/${audioFiles[selectedCharacter]}`);

    const startMissionButton = document.getElementById("start-mission");
    if (startMissionButton) {
      startMissionButton.addEventListener("click", () => {
        missionIntro.classList.add("hidden");
        questionsOverlay.classList.remove("hidden");
        displayQuestion(currentQuestionIndex);
      });
    }
  };

  const handleRetry = () => {
    showSection(characterSelectionSection);
    crossfadeMusic("audio/empireQuiz.mp3");

    currentQuestionIndex = 0;
    correctAnswersCount = 0;
    selectedCharacter = null;
    selectedGender = null;

    genderMaleButton.classList.remove("active");
    genderFemaleButton.classList.remove("active");

    const quizImage = quizContainer.querySelector(".quiz-image");
    if (quizImage) {
      quizImage.remove();
    }
    main.className = "";
  };

  const handleBackToHero = () => {
    showSection(heroSection);
    backgroundMusic.pause();
    backgroundMusic.currentTime = 0;
    updateMusicButtonState();
    updateEffectsButtonState();
  };

  const handleToggleMusic = () => {
    isMusicOn = !isMusicOn;
    if (isMusicOn) {
      backgroundMusic.play();
    } else {
      backgroundMusic.pause();
    }
    updateMusicButtonState();
  };

  const handleToggleEffects = () => {
    isEffectsOn = !isEffectsOn;
    updateEffectsButtonState();
  };

  const handleBackToCharacters = () => {
    showSection(characterSelectionSection);
  };

  const showSection = sectionToShow => {
    const allSections = [
      heroSection,
      characterSelectionSection,
      nameInputSection,
      quizSection,
      resultSection,
    ];

    allSections.forEach(section => {
      section.classList.add("hidden");
    });
    sectionToShow.classList.remove("hidden");

    // üëá –ó–º—ñ–Ω–∏: –∫–æ—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –æ–±–æ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    if (sectionToShow === heroSection) {
      mainFooter.classList.remove("visually-hidden");
      bottomButtonsContainer.classList.add("hidden");
    } else {
      mainFooter.classList.add("visually-hidden");
      bottomButtonsContainer.classList.remove("hidden");
    }
  };

  if (genderMaleButton) {
    genderMaleButton.addEventListener("click", () => {
      selectedGender = "male";
      genderMaleButton.classList.add("active");
      if (genderFemaleButton) {
        genderFemaleButton.classList.remove("active");
      }
    });
  }

  if (genderFemaleButton) {
    genderFemaleButton.addEventListener("click", () => {
      selectedGender = "female";
      genderFemaleButton.classList.add("active");
      if (genderMaleButton) {
        genderMaleButton.classList.remove("active");
      }
    });
  }

  if (chooseCharacterButton) {
    chooseCharacterButton.addEventListener("click", () => {
      crossfadeMusic("audio/empireQuiz.mp3");
      showSection(characterSelectionSection);
      setupCharacterSelection();
    });
  }

  if (confirmCharacterButton) {
    confirmCharacterButton.addEventListener("click", handleCharacterConfirmation);
  }
  if (startGameButton) {
    startGameButton.addEventListener("click", handleStartGame);
  }
  if (retryButton) {
    retryButton.addEventListener("click", handleRetry);
  }

  if (toggleMusicButton) {
    toggleMusicButton.addEventListener("click", handleToggleMusic);
  }
  if (toggleEffectsButton) {
    toggleEffectsButton.addEventListener("click", handleToggleEffects);
  }

  if (toggleMusicFooterButton) {
    toggleMusicFooterButton.addEventListener("click", handleToggleMusic);
  }
  if (toggleEffectsFooterButton) {
    toggleEffectsFooterButton.addEventListener("click", handleToggleEffects);
  }

  if (backButton) {
    backButton.addEventListener("click", handleBackToCharacters);
  }
  if (backToHeroButton) {
    backToHeroButton.addEventListener("click", handleBackToHero);
  }

  showSection(heroSection);
});
